services:

  # Service pour gérer facilement Docker avec une interface web
  portainer:
    image: portainer/portainer-ce:alpine
    container_name: portainer
    restart: unless-stopped
    networks:
      - cloud
    ports:
      - "9000:9000"  # Accès local sur le port 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Accès à Docker
      - portainer_data:/data                       # Stockage des données
    labels:  # Configuration Traefik pour accès sécurisé via HTTPS
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer.rule=Host(`portainer.${MY_DOMAIN}`)'
      - 'traefik.http.routers.portainer.entryPoints=websecure'
      - 'traefik.http.routers.portainer.tls.certresolver=letsencrypt'
      - 'traefik.http.services.portainer.loadbalancer.server.port=9000'

  # Base de données pour Nextcloud
  nextclouddb:
    image: mariadb
    container_name: nextcloud-db
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW  # Configuration spécifique à Nextcloud
    networks:
      - cloud
    volumes:
      - nextclouddb:/var/lib/mysql  # Stockage permanent des données
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: true  # Génère un mot de passe sécurisé
      MYSQL_PASSWORD: ${DB_PASSWORD}    # Mot de passe utilisateur
      MYSQL_DATABASE: ${DB_DATABASE}    # Nom de la base de données
      MYSQL_USER: ${DB_USER}            # Utilisateur de la base de données
      PUID: 1000                        # Permissions utilisateur
      PGID: 1000
      TZ: America/Montreal              # Fuseau horaire

  # Application Nextcloud (cloud personnel)
  nextcloud:
    image: nextcloud
    container_name: nextcloud
    restart: unless-stopped
    depends_on:
      - nextclouddb  # Doit démarrer après la base de données
    networks:
      - cloud
    ports:
      - "8081:80"  # Accès local à Nextcloud via port 8081
    volumes:
      - ./html:/var/www/html                 # Dossier principal de Nextcloud
      - ./custom_apps:/var/www/html/custom_apps  # Applications personnalisées
      - ./config:/var/www/html/config        # Configuration
      - ./data:/var/www/html/data            # Données utilisateurs
    environment:
      MYSQL_PASSWORD: ${DB_PASSWORD}         # Connexion à la base de données
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      PUID: 1000                             # Permissions utilisateur
      PGID: 1000
      TZ: America/Montreal                   # Fuseau horaire
    labels:  # Configuration Traefik pour HTTPS
      - 'traefik.enable=true'
      - 'traefik.http.routers.nextcloud.rule=Host(`nextcloud.${MY_DOMAIN}`)'
      - 'traefik.http.routers.nextcloud.entryPoints=websecure'
      - 'traefik.http.routers.nextcloud.tls.certresolver=letsencrypt'
      - 'traefik.http.services.nextcloud.loadbalancer.server.port=80'

  # Page d'accueil centralisée pour gérer facilement tes services Docker
  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    restart: unless-stopped
    networks:
      - cloud
    ports:
      - "3000:3000"  # Accès local sur port 3000
    volumes:
      - homepage:/app/config                     # Configuration persistante
      - /var/run/docker.sock:/var/run/docker.sock  # Accès aux infos Docker
    security_opt:
      - no-new-privileges:true                   # Sécurité renforcée
    labels:  # Accès via Traefik avec HTTPS
      - 'traefik.enable=true'
      - 'traefik.http.routers.homepage.rule=Host(`homepage.${MY_DOMAIN}`)'
      - 'traefik.http.routers.homepage.entryPoints=websecure'
      - 'traefik.http.routers.homepage.tls.certresolver=letsencrypt'
      - 'traefik.http.services.homepage.loadbalancer.server.port=3000'

  # Proxy inversé Traefik qui gère automatiquement l’accès sécurisé (HTTPS)
  proxy:
    image: traefik
    container_name: traefik
    restart: unless-stopped
    networks:
      - cloud
    command:
      # Configuration générale de Traefik
      - "--log.level=DEBUG"                # Niveau de détail des logs
      - "--api.insecure=true"              # API activée (non sécurisée)
      - "--providers.docker=true"          # Utilise Docker pour détecter les services
      - "--providers.docker.exposedbydefault=false"  # Exposition manuelle uniquement
      # Configuration Let's Encrypt (HTTPS)
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
      - "--certificatesresolvers.letsencrypt.acme.email=mail@mail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # Redirection automatique HTTP → HTTPS
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certresolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${MY_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${MY_DOMAIN}"
    volumes:
      - "../data/traefik/letsencrypt:/letsencrypt"    # Stockage certificats HTTPS
      - "/var/run/docker.sock:/var/run/docker.sock:ro"  # Accès aux infos Docker en lecture seule
    labels:  # Configuration accès interface admin de Traefik
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`${MY_DOMAIN}`)'
      - 'traefik.http.routers.api.entryPoints=websecure'
      - 'traefik.http.routers.api.service=api@internal'
    ports:
      - "443:443"  # HTTPS
      - "80:80"    # HTTP (redirige vers HTTPS)
    environment:
      - "DUCKDNS_TOKEN=${DUCKDNS_TOKEN}"  # Token DuckDNS pour Let's Encrypt

# Déclaration des volumes pour sauvegarder les données durablement
volumes:
  portainer_data:
  nextclouddb:
  homepage:

# Réseau Docker privé pour isoler et connecter les services
networks:
  cloud:
